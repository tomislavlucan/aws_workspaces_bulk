AWSTemplateFormatVersion: '2010-09-09'
Description: Create WorkSpaces from S3 CSV

Parameters:
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket containing users.csv
  S3ObjectKey:
    Type: String
    Description: The key (path) to the users.csv file
  KmsKeyArn: 
    Type: String
    Description: ARN of the KMS key to use for WorkSpaces encryption

Resources:
  WorkSpacesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: WorkSpacesLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - workspaces:CreateWorkspaces
                  - workspaces:ModifyWorkspaceProperties
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/${S3ObjectKey}" 

  WorkSpacesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: | 
     import boto3
import csv

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    workspaces = boto3.client('workspaces')

    bucket_name = 'your-bucket-name'
    key = 'folder_name/users_.csv'

    # Get CSV data from S3
    csv_obj = s3.get_object(Bucket=bucket_name, Key=key)
    body = csv_obj['Body'].read().decode('utf-8')
    users = list(csv.DictReader(body.splitlines()))  # Convert DictReader to list

    # Process and create workspaces
    for i, user in enumerate(users, start=1):
        try:
            response = workspaces.create_workspaces(
                Workspaces=[{
                    'DirectoryId': user['DirectoryId'],
                    'UserName': user['UserName'],
                    'BundleId': user['BundleId'],
                    'RootVolumeEncryptionEnabled': True,  # Adjust as needed
                    'UserVolumeEncryptionEnabled': True,  # Adjust as needed
                    'VolumeEncryptionKey': user['KMSKey'],
                    'WorkspaceProperties': {
                        'RunningMode': 'ALWAYS_ON',  # Adjust as needed
                        'RootVolumeSizeGib': int(user['RootVolumeSize']),  # Adjust as needed
                        'UserVolumeSizeGib': int(user['UserVolumeSize']),  # Adjust as needed
                        'ComputeTypeName': user['ComputeType'],  # Adjust as needed
                    }
                }]
            )

            if response.get('ResponseMetadata', {}).get('HTTPStatusCode') == 200:
                print(f"Workspace creation request successful for user {user['UserName']}.")

                if response['FailedRequests']:
                    print(f"Error creating workspace for user {user['UserName']}: {response['FailedRequests'][0]['ErrorMessage']}")
                else:
                    print(f"Workspace creation in progress for user {user['UserName']}.")

            else:
                print(f"Error creating workspace for user {user['UserName']}: {response}")

        except Exception as e:
            print(f"Error creating workspace for user {user['UserName']}: {str(e)}")

        # Print progress
        print(f"Processed {i} users out of {len(users)}")

    print("All users processed.")


      Handler: index.lambda_handler
      Role: !GetAtt WorkSpacesLambdaRole.Arn
      Runtime: python3.9
      Timeout: 300 

  S3EventTrigger:
    Type: AWS::Events::Rule 
    Properties:
      Name: !Sub "workspaces-bulk-S3EventTrigger-${AWS::StackName}"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - ObjectCreated
          - ObjectCreatedPut
        detail:
          bucket:
            name: 
              - !Ref S3BucketName
          object:
            key:
              - !Sub "${S3ObjectKey}/*"
      Targets:
        - Arn: !GetAtt WorkSpacesLambdaFunction.Arn
          Id: "TargetFunction"


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WorkSpacesLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/S3EventTrigger" 
